{"version":3,"sources":["Noise.js","Context.js","noisyLine.js","Hill.js","App.js","serviceWorker.js","index.js"],"names":["Noise","length","range","arguments","undefined","radius","Object","classCallCheck","this","noise","OpenSimplexNoise","Date","now","a","r","start","findStart","reset","value","r1","r2","Math","PI","y1","y2","y","theta","atan2","prev","get","smallestAngle","Number","MAX_SAFE_INTEGER","bestStart","i","cur","angle","abs","step","x","cos","sin","scale","noise2D","Context","ctx","noisyLine","x1","x2","f","sqrt","getAngle","noise2","floor","amplitude","setRange","frequency","setRadius","cx","cy","radians","ax","ay","strokeStyle","yOffset","moveTo","n","_x","_y","_this$rotate","rotate","lineTo","Hill","width","height","colour","line","beginPath","draw","fillStyle","fill","closePath","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","pixelSize","lenth","drawing","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","_this2","canvas","refs","set","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","_this3","_window","innerWidth","innerHeight","setState","nextFrame","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawLine","_this4","_this$state","grd","createLinearGradient","addColorStop","fillRect","getTime","_this$state2","interval","mr","mg","mb","g","b","hillCount","concat","_this$state3","_this$state4","react_default","createElement","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96281ff8.chunk.js","sourcesContent":["import OpenSimplexNoise from 'open-simplex-noise';\r\n\r\nclass Noise {\r\n    constructor(length, range = [1, 100], radius = 2) {\r\n\tthis.noise = new OpenSimplexNoise(Date.now());\r\n\tthis.length = length;\r\n\tthis.a = 0;\r\n\tthis.range = range;\r\n\tthis.r = radius;\r\n\tthis.start = 0;\r\n\t\r\n\tthis.findStart();\r\n\tthis.reset();\r\n    }\r\n\r\n    setRange(range) {\r\n\tthis.range = range;\r\n    }\r\n\r\n    setRadius(radius) {\r\n\tthis.radius = radius;\r\n    }\r\n\r\n    scale( value, r1, r2 ) { \r\n\treturn (value - r1[0]) * (r2[1] - r2[0]) / (r1[1] - r1[0]) + r2[0];\r\n    }\r\n\r\n    reset() {\r\n\tthis.a = this.start;\r\n    }\r\n\r\n    step() {\r\n\treturn (Math.PI * 2) / this.length;\r\n    }\r\n\r\n    angle(y1, y2) {\r\n\tconst y = y1 - y2;\r\n\tconst x = 10;\r\n\tlet theta = Math.atan2(y, x);\r\n\ttheta *= 180 / Math.PI;\r\n\r\n\treturn theta;\r\n    }\r\n\r\n    findStart() {\r\n\tlet prev = this.get();\r\n\r\n\tlet smallestAngle = Number.MAX_SAFE_INTEGER;\r\n\tlet bestStart = 0;\r\n\r\n\tfor (let i = 0 ; i < this.length ; i++) {\r\n\t    const cur = this.get();\r\n\t    const angle = Math.abs(this.angle(prev, cur));\r\n\r\n\t    if (angle < smallestAngle) {\r\n\t\tsmallestAngle = angle;\r\n\t\tbestStart = this.a  - (this.step() * 2);\r\n\t    }\r\n\r\n\t    prev = cur;\r\n\t}\r\n\r\n\tthis.start = bestStart;\r\n    }\r\n\r\n    get() {\r\n\tconst step = this.step();\r\n\t\r\n\tconst { r, a } = this;\r\n\tconst x = r * Math.cos(a);\r\n\tconst y = r * Math.sin(a);\r\n\r\n\tthis.a += step;\r\n\r\n\treturn this.scale(this.noise.noise2D(x, y), [0, 1], this.range);\r\n    }\r\n}\r\n\r\n\r\nexport default Noise;\r\n","class Context {\n    static get() {\n\treturn this.ctx;\n    }\n\n    static set(ctx) {\n\tthis.ctx = ctx;\n    }\n}\n\nContext.ctx = null;\n\nexport default Context;\n","import Noise from './Noise';\r\nimport Context from './Context';\r\n\r\nclass noisyLine {\r\n    constructor(x1, y1, x2, y2, a = 100, f = 2) {\r\n\tconst x = x1 - x2;\r\n\tconst y = y1 - y2;\r\n\r\n\tthis.length = Math.abs(Math.sqrt( x*x + y*y ));\r\n\tthis.angle = this.getAngle(x1, y1, x2, y2);\r\n\r\n\tthis.noise = new Noise(this.length, [0, a], f);\r\n\tthis.noise2 = new Noise(this.length, [0, Math.floor(a/5)], Math.floor(f * 5));\r\n\r\n\tthis.x1 = x1;\r\n\tthis.y1 = y1;\r\n\tthis.x2 = x2;\r\n\tthis.y2 = y2;\r\n    }\r\n\r\n    setAmplitude(amplitude) {\r\n\tthis.noise.setRange([0, amplitude]);\r\n    }\r\n\r\n    setFrequency(frequency) {\r\n\tthis.noise.setRadius(frequency);\r\n    }\r\n\r\n    getAngle(x1, y1, x2, y2) {\r\n\tconst y = y1 - y2;\r\n\tconst x = x1 - x2;\r\n\tconst theta = Math.atan2(x, y) * (180 /Math.PI);\r\n\r\n\treturn theta + 90;\r\n    }\r\n\r\n    rotate(cx, cy, x, y, angle) {\r\n\tconst radians = (Math.PI / 180) * angle;\r\n        const cos = Math.cos(radians);\r\n        const sin = Math.sin(radians);\r\n\t\r\n        const ax = (cos * (x - cx)) + (sin * (y - cy)) + cx;\r\n        const ay = (cos * (y - cy)) - (sin * (x - cx)) + cy;\r\n\t\r\n\treturn {ax: ax, ay: ay};\r\n    }\r\n    \r\n    draw() {\r\n\tconst ctx = Context.get();\r\n\tconst { noise, noise2, x1, y1, x2, y2 } = this;\r\n\tconst y = y1;\r\n\r\n\tconst xOffset = Math.floor((x2 - x1) / 4);\r\n\r\n\t//ctx.beginPath();\r\n\r\n\tctx.strokeStyle = '#ffffff';\r\n\r\n\tlet yOffset = null;\r\n\tnoise.reset();\r\n\tctx.moveTo(x1, y1);\r\n\t\r\n\tfor (let x = 0 ; x <= this.length; x++) {\r\n\t    const n = noise.get() + noise2.get();\r\n\t    yOffset = yOffset || n;\r\n\t    \r\n\t    const _x = x + x1;\r\n\t    const _y = (y + n) - yOffset;\r\n\t    const { ax, ay } = this.rotate(x1, y1, _x, _y, this.angle);\r\n\t    ctx.lineTo(ax, ay);\r\n\t}\r\n\r\n\t//ctx.stroke();\r\n\t//ctx.closePath();    \r\n    }\r\n}\r\n\r\nexport default noisyLine;\r\n","import noisyLine from './noisyLine';\nimport Context from './Context';\n\n\nclass Hill {\n    constructor(width, height, y, colour) {\n\tthis.width = width;\n\tthis.height = height;\n\tthis.y = y;\n\tthis.colour = colour;\n    }\n\n    draw() {\n\tconst ctx = Context.get();\n\tconst { width, height, y, colour } = this;\n\t\n\tconst line = new noisyLine(0, y, width, y, 50, 1);\n\n\tctx.beginPath();\n\tline.draw();\n\tctx.lineTo(width, height);\n\tctx.lineTo(0, height);\n\tctx.lineTo(0, y);\n\tctx.fillStyle = colour;\n\tctx.fill();\n\tctx.closePath();\n    \n    }\n}\n\nexport default Hill;\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Noise from './Noise';\r\nimport noisyLine from './noisyLine';\r\nimport Hill from './Hill';\r\n\r\nimport Context from './Context';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n\tsuper(props);\r\n\r\n\tthis.state = {\r\n\t    pixelSize: 8,\r\n\t    height: 500,\r\n\t    width: 150,\r\n\t    lenth: 100,\r\n\t    range: 20,\r\n\t    yOffset: null\t    \r\n\t};\r\n\t\r\n\tthis.drawing = false;\r\n\tthis.ctx = null;\r\n\tthis.line = \r\n\r\n\tthis.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n\tthis.startts = this.getTS();\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n\tconst canvas = this.refs.canvas;\r\n\tContext.set(canvas.getContext(\"2d\"));\r\n\r\n\t\r\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\r\n\tthis.updateWindowDimensions();\r\n\twindow.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    \r\n    updateWindowDimensions() {\r\n\tconst { innerWidth, innerHeight } = window;\r\n\tconst { range } = this.state;\r\n\r\n\tconst length = Math.floor(innerWidth / 2);\r\n\tconst noise = new Noise(length, [-range, range]);\r\n\t\r\n\tthis.setState({ width: innerWidth, height: innerHeight, noise: noise, length: length }, () => this.nextFrame());\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n\tcancelAnimationFrame(this.rAF);\r\n\twindow.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateAnimationState() {\r\n\tthis.ts = this.getTS();\r\n\tthis.clearFrame();\r\n\r\n\tthis.drawLine();\r\n\t\t\r\n\t//this.nextFrame();\r\n    }\r\n\r\n    nextFrame() {\r\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\r\n    }\r\n\r\n    clearFrame() {\r\n\tconst { width, height } = this.state;\r\n\tconst ctx = Context.get();\r\n\r\n\tconst light = '#b9c3d0';\r\n\tconst dark = '#678bbb';\r\n\r\n\tconst grd = ctx.createLinearGradient(0, height, 0, 0);\r\n\tgrd.addColorStop(0, light);\r\n\tgrd.addColorStop(.4, light);\r\n\tgrd.addColorStop(.75, dark);\r\n\tgrd.addColorStop(1, dark);\r\n\t\r\n\tctx.fillStyle = grd;\r\n\tctx.fillRect(0, 0, width, height);\r\n    }\r\n\r\n    getTS() {\r\n\tconst date = new Date();\r\n\t\r\n\treturn date.getTime();\r\n    }\r\n\r\n    scale( value, r1, r2 ) { \r\n\treturn ( value - r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 ];\r\n    }\r\n\r\n    drawLine() {\r\n\tconst { width, height } = this.state;\r\n\tconst interval = Math.floor(height / 10);\r\n\r\n\tconst hillCount = 5;\r\n\t\r\n\tconst ir = 106;\r\n\tconst mr = Math.floor(ir / (hillCount + 1));\r\n\tconst ig = 121;\r\n\tconst mg = Math.floor(ig / (hillCount + 1));\r\n\tconst ib = 101;\r\n\tconst mb = Math.floor(ib / (hillCount + 1));\r\n\t\r\n\tfor (let i = hillCount; i > 0; i--) {\r\n\t    let mul = ((hillCount * 2) + 1) - i;\r\n\t    \r\n\t    const r = ir - (mr * i);\r\n\t    const g = ig - (mg * i);\r\n\t    const b = ib - (mb * i);\r\n\t    \r\n\t    const hill = new Hill(width, height, interval * mul, `rgba(${r}, ${g}, ${b}, ${1})`);\r\n\t    \r\n\t    hill.draw();\r\n\t}\r\n    }\r\n    \r\n    drawLineOld() {\r\n\tconst ctx = Context.get();\r\n\tconst { width, height, noise } = this.state;\r\n\tconst y = Math.floor(height / 10) * 8;\r\n\r\n\tconst line = new noisyLine(0, y, width, y, 50, 1);\r\n\r\n\tctx.beginPath();\r\n\tline.draw();\r\n\tctx.lineTo(width, height);\r\n\tctx.lineTo(0, height);\r\n\tctx.lineTo(0, y);\r\n\t//ctx.stroke();\r\n\tctx.fillStyle = '#ffffff';\r\n\tctx.fill();\r\n\tctx.closePath();\r\n    }\r\n    \r\n    render() {\r\n\tconst { width, height } = this.state;\r\n\r\n        return (\r\n\t    <div>\r\n              <div>\r\n\t\t<canvas ref=\"canvas\" width={ width } height={ height } />\r\n              </div>\r\n            </div>\r\n\t);\t\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}